/***************************************************************************
* File: mesh_bound.h/.cpp
* Description: To decompose the making of an object from the
*   identification of its center and bounding planes, this object
*   was created. It requires the original pointcloud and can determine
*   all centroid and plane information.
* Notes: Centroid and plane data can be queried via getters; they are not
*   returned via methods.
***************************************************************************/
#ifndef MESH_BOUND_H
#define MESH_BOUND_H

//ros includes
#include "ros/ros.h"
#include "visualization_msgs/Marker.h"
#include <sensor_msgs/PointCloud2.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/PolygonStamped.h>

#include <tf/transform_listener.h>

#include "pcl/ros/conversions.h"
#include <pcl_conversions/pcl_conversions.h>
#include <pcl/point_types.h>
#include <pcl/io/pcd_io.h>
#include <pcl/kdtree/kdtree_flann.h>
#include <pcl/features/normal_3d.h>
#include <pcl/surface/gp3.h>
#include <pcl/io/vtk_lib_io.h>
#include <pcl/filters/project_inliers.h>
//#include <pcl/surface/convex_hull.h>

//From Tutorial
/*#include <pcl/ModelCoefficients.h>
#include <pcl/point_types.h>
#include <pcl/sample_consensus/method_types.h>
#include <pcl/sample_consensus/model_types.h>
#include <pcl/filters/passthrough.h>
#include <pcl/filters/project_inliers.h>
#include <pcl/segmentation/sac_segmentation.h>
#include <pcl/surface/concave_hull.h>*/
//End tutorial

#include <Eigen/Dense>

#include "qhull_interface.h"

#include <ctime>
#include <cstdlib>
#include <string>
#include <vector>
using std::string;
using std::vector;
using std::cout;
using std::cin;
using std::endl;
class MeshBound {

};


#endif
